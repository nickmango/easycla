# Copyright The Linux Foundation and each contributor to CommunityBridge.
# SPDX-License-Identifier: MIT
version: 2.1

environment:
  BASH_ENV: ~/.bashrc

setup_aws: &setup_aws
  run:
    name: Setup AWS key and Profile
    command: |
      touch ${BASH_ENV}
      if ! grep -q AWS_ACCESS_KEY_ID ${BASH_ENV} ; then
        echo "export AWS_ACCESS_KEY_ID='${!AWS_ACCESS_KEY_ID_ENV_VAR}'" >> ${BASH_ENV}
        echo "Added AWS_ACCESS_KEY_ID to ${BASH_ENV}"
      else
        echo "Skipped adding AWS_ACCESS_KEY_ID to ${BASH_ENV} - already there"
      fi

      if ! grep -q AWS_SECRET_ACCESS_KEY ${BASH_ENV} ; then
        echo "export AWS_SECRET_ACCESS_KEY='${!AWS_SECRET_ACCESS_KEY_ENV_VAR}'" >> ${BASH_ENV}
        echo "Added AWS_SECRET_ACCESS_KEY to ${BASH_ENV}"
      else
        echo "Skipped adding AWS_SECRET_ACCESS_KEY to ${BASH_ENV} - already there"
      fi

      echo "Installing Profile '${AWS_PROFILE}'..."
      mkdir -p ~/.aws

      touch ~/.aws/config
      if ! grep -q AWS_PROFILE ~/.aws/config; then
        printf "[profile ${AWS_PROFILE}]\nregion=${AWS_REGION}\noutput=json" > ~/.aws/config
        echo "Added ${AWS_PROFILE} profile to ~/.aws/config"
      else
        echo "Skipped adding ${AWS_PROFILE} to ~/.aws/config - already there"
      fi

      touch ~/.aws/credentials
      if ! grep -q AWS_PROFILE ~/.aws/credentials; then
        printf "[${AWS_PROFILE}]\naws_access_key_id=${!AWS_ACCESS_KEY_ID_ENV_VAR}\naws_secret_access_key=${!AWS_SECRET_ACCESS_KEY_ENV_VAR}" > ~/.aws/credentials
        echo "Added ${AWS_PROFILE} profile to ~/.aws/credentials"
      else
        echo "Skipped adding ${AWS_PROFILE} to ~/.aws/credentials - already there"
      fi

      if ! grep -q AWS_PROFILE ${BASH_ENV}; then
        echo "export AWS_PROFILE=${AWS_PROFILE}" >> ${BASH_ENV}
        echo "Added ${AWS_PROFILE} profile to ${BASH_ENV}"
      else
        echo "Skipped adding ${AWS_PROFILE} to ${BASH_ENV} - already there"
      fi

install_aws_cli: &install_aws_cli
  run:
    name: Install AWS CLI Tools
    command: |
      sudo apt-get update
      sudo apt-get install -y awscli

set_functional_test_environment: &set_functional_test_environment
  run:
    name: set deployment environment
    command: |
      cd && echo "Setting environment in $BASH_ENV for stage ${STAGE}" && touch $BASH_ENV

      # Note, we place single quotes around the values to ensure any values
      # with dollar signs are not intrepreted and expanded by accident
      # Default Test User (functional test)
      echo "export AUTH0_USERNAME='${!AUTH0_USERNAME_ENV_VAR}'" >> ${BASH_ENV}
      echo "export AUTH0_PASSWORD='${!AUTH0_PASSWORD_ENV_VAR}'" >> ${BASH_ENV}
      echo "export AUTH0_CLIENT_ID='${!AUTH0_CLIENT_ID_ENV_VAR}'" >> ${BASH_ENV}

      # Prospective CLA Manager User (for functional tests)
      echo "export AUTH0_USER1_EMAIL='${!AUTH0_USER1_EMAIL_ENV_VAR}'" >> ${BASH_ENV}
      echo "export AUTH0_USER1_USERNAME='${!AUTH0_USER1_USERNAME_ENV_VAR}'" >> ${BASH_ENV}
      echo "export AUTH0_USER1_PASSWORD='${!AUTH0_USER1_PASSWORD_ENV_VAR}'" >> ${BASH_ENV}
      echo "export AUTH0_USER1_CLIENT_ID='${!AUTH0_USER1_CLIENT_ID_ENV_VAR}'" >> ${BASH_ENV}

      # CLA Manager User (for functional tests)
      echo "export AUTH0_USER2_EMAIL='${!AUTH0_USER2_EMAIL_ENV_VAR}'" >> ${BASH_ENV}
      echo "export AUTH0_USER2_USERNAME='${!AUTH0_USER2_USERNAME_ENV_VAR}'" >> ${BASH_ENV}
      echo "export AUTH0_USER2_PASSWORD='${!AUTH0_USER2_PASSWORD_ENV_VAR}'" >> ${BASH_ENV}
      echo "export AUTH0_USER2_CLIENT_ID='${!AUTH0_USER2_CLIENT_ID_ENV_VAR}'" >> ${BASH_ENV}

      # CLA Manager Intel (for functional tests)
      echo "export AUTH0_USER3_EMAIL='${!AUTH0_USER3_EMAIL_ENV_VAR}'" >> ${BASH_ENV}
      echo "export AUTH0_USER3_USERNAME='${!AUTH0_USER3_USERNAME_ENV_VAR}'" >> ${BASH_ENV}
      echo "export AUTH0_USER3_PASSWORD='${!AUTH0_USER3_PASSWORD_ENV_VAR}'" >> ${BASH_ENV}
      echo "export AUTH0_USER3_CLIENT_ID='${!AUTH0_USER3_CLIENT_ID_ENV_VAR}'" >> ${BASH_ENV}

      # CLA Manager AT&T (for functional tests)
      echo "export AUTH0_USER4_EMAIL='${!AUTH0_USER4_EMAIL_ENV_VAR}'" >> ${BASH_ENV}
      echo "export AUTH0_USER4_USERNAME='${!AUTH0_USER4_USERNAME_ENV_VAR}'" >> ${BASH_ENV}
      echo "export AUTH0_USER4_PASSWORD='${!AUTH0_USER4_PASSWORD_ENV_VAR}'" >> ${BASH_ENV}
      echo "export AUTH0_USER4_CLIENT_ID='${!AUTH0_USER4_CLIENT_ID_ENV_VAR}'" >> ${BASH_ENV}

      # Project Manager (for functional tests)
      echo "export AUTH0_USER5_EMAIL='${!AUTH0_USER5_EMAIL_ENV_VAR}'" >> ${BASH_ENV}
      echo "export AUTH0_USER5_USERNAME='${!AUTH0_USER5_USERNAME_ENV_VAR}'" >> ${BASH_ENV}
      echo "export AUTH0_USER5_PASSWORD='${!AUTH0_USER5_PASSWORD_ENV_VAR}'" >> ${BASH_ENV}
      echo "export AUTH0_USER5_CLIENT_ID='${!AUTH0_USER5_CLIENT_ID_ENV_VAR}'" >> ${BASH_ENV}

step-library:
  - &install-node-8
    run:
      name: Install node 8
      command: |
        set +e
        curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.2/install.sh | bash
        [ -s "${NVM_DIR}/nvm.sh" ] && \. "${NVM_DIR}/nvm.sh"
        node_version="v8.17.0"
        echo "Installing node ${node_version}..."
        nvm install ${node_version}
        nvm alias default ${node_version}
        echo "[ -s \"${NVM_DIR}/nvm.sh\" ] && . \"${NVM_DIR}/nvm.sh\"" >> $BASH_ENV

  - &install-node-12
    run:
      name: Install node 12
      command: |
        set +e
        curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.2/install.sh | bash
        [ -s "${NVM_DIR}/nvm.sh" ] && \. "${NVM_DIR}/nvm.sh"
        node_version="v12.20.0"
        echo "Installing node ${node_version}..."
        nvm install ${node_version}
        nvm alias default ${node_version}
        echo "[ -s \"${NVM_DIR}/nvm.sh\" ] && . \"${NVM_DIR}/nvm.sh\"" >> $BASH_ENV

jobs:
  # Builds
  buildBackend: &buildBackendAnchor
    docker:
      - image: circleci/python:3.7.11-node
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "e9:13:85:f1:b1:a1:25:bf:f5:44:34:66:82:1e:31:59"
      - *setup_aws
      - run: echo 'export NVM_DIR=${HOME}/.nvm' >> $BASH_ENV
      - *install-node-12
      - run:
          name: Install Top Level Dependencies
          command: |
            echo "Node version is: $(node --version)"
            echo "Running top level install..."
            yarn install
      - *install_aws_cli
      - run:
          name: Setup Backend
          command: |
            cd cla-backend
            yarn install
            echo "Upgrading pip..."
            python3 -m pip install --upgrade pip
            sudo pip install -r requirements.txt
      - run:
          name: lint
          command: |
            cd cla-backend
            ./check-headers.sh
            # Lint will always pass for now - need to continue addressing lint issues
            pylint cla/*.py || true
      - run:
          name: test
          command: |
            cd cla-backend
            export GITHUB_OAUTH_TOKEN=${GITHUB_OAUTH_TOKEN}
            pytest "cla/tests" -p no:warnings --cov="cla"

  buildBackendDev:
    <<: *buildBackendAnchor
    environment:
      AWS_ACCESS_KEY_ID_ENV_VAR: AWS_ACCESS_KEY_ID_DEV
      AWS_SECRET_ACCESS_KEY_ENV_VAR: AWS_SECRET_ACCESS_KEY_DEV
      AWS_PROFILE: lf-cla
      AWS_REGION: us-east-1
      STAGE: dev

  buildBackendStaging:
    <<: *buildBackendAnchor
    environment:
      AWS_ACCESS_KEY_ID_ENV_VAR: AWS_ACCESS_KEY_ID_STAGING
      AWS_SECRET_ACCESS_KEY_ENV_VAR: AWS_SECRET_ACCESS_KEY_STAGING
      AWS_PROFILE: lf-cla
      AWS_REGION: us-east-1
      STAGE: staging

  buildBackendProd:
    <<: *buildBackendAnchor
    environment:
      AWS_ACCESS_KEY_ID_ENV_VAR: AWS_ACCESS_KEY_ID_PROD
      AWS_SECRET_ACCESS_KEY_ENV_VAR: AWS_SECRET_ACCESS_KEY_PROD
      AWS_PROFILE: lf-cla
      AWS_REGION: us-east-1
      STAGE: prod

  buildGoBackend: &buildGoBackendAnchor
    docker:
      - image: circleci/golang:1.17
    working_directory: /go/src/github.com/communitybridge/easycla/
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "e9:13:85:f1:b1:a1:25:bf:f5:44:34:66:82:1e:31:59"
      - *setup_aws
      - run: echo 'export NVM_DIR=${HOME}/.nvm' >> $BASH_ENV
      - *install-node-12
      - run: echo 'export GO111MODULE=on' >> $BASH_ENV
      - run:
          name: Setup
          command: |
            source ${BASH_ENV}
            echo "Installing python..."
            sudo apt-get update
            sudo apt install -y software-properties-common
            sudo add-apt-repository ppa:deadsnakes/ppa -y
            sudo apt-get install -y python3 python3-pip
            echo "Upgrading pip..."
            python3 -m pip install --upgrade pip
            echo "Python 3 version:"
            python3 --version
            make -f cla-backend-go/Makefile setup-dev
      - run:
          name: Clean
          command: |
            cd cla-backend-go
            make clean
      - run:
          name: Dependencies
          command: |
            cd cla-backend-go
            make deps
      - run:
          name: Build Swagger
          command: |
            cd cla-backend-go
            make swagger
      - run:
          name: Build
          command: |
            cd cla-backend-go
            echo "Building Lambdas..."
            make build-lambdas-linux
            echo "Building Functional Tests..."
            make build-functional-tests-linux
      - run:
          name: Test
          command: |
            if [[ "${STAGE}" == "dev" ]]; then
              cd cla-backend-go
              make test
            else
              echo "Skipping test - only runs in dev stage."
            fi
      - run:
          name: Lint
          command: |
            if [[ "${STAGE}" == "dev" ]]; then
              cd cla-backend-go
              make lint
            else
              echo "Skipping lint - only runs in dev stage."
            fi
      - run:
          name: Move Binary
          command: |
            mv cla-backend-go ~/cla-backend-go
      - persist_to_workspace:
          root: ~/
          paths:
            - cla-backend-go/bin/*

  buildGoBackendCommon:
    <<: *buildGoBackendAnchor
    environment:
      STAGE: dev
      AWS_ACCESS_KEY_ID_ENV_VAR: AWS_ACCESS_KEY_ID_DEV
      AWS_SECRET_ACCESS_KEY_ENV_VAR: AWS_SECRET_ACCESS_KEY_DEV
      AWS_PROFILE: lf-cla
      AWS_REGION: us-east-1
      DYNAMODB_AWS_REGION: us-east-1

  # Deploys Old API
  deployV1Backend: &deployV1BackendAnchor
    docker:
      - image: circleci/python:3.7.9-node
    steps:
      - attach_workspace:
          at: ~/
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "e9:13:85:f1:b1:a1:25:bf:f5:44:34:66:82:1e:31:59"
      - *setup_aws
      - run: echo 'export NVM_DIR=${HOME}/.nvm' >> $BASH_ENV
      - *install-node-12
      - run:
          name: Install Top Level Dependencies
          command: |
            echo "Node version is: $(node --version)"
            echo "Running top level install..."
            yarn install
      - run:
          name: Deploy EasyCLA v1
          command: |
            echo "Using AWS profile: ${AWS_PROFILE}"
            echo "Stage is: ${STAGE}"

            # --------------------------------------------------------------
            ## Debug to confirm the binary files were restored
            echo "Directory: ~/"
            ls -alF ~/
            echo "Directory: ~/cla-backend-go/"
            ls -alF ~/cla-backend-go/
            ## End Debug
            # --------------------------------------------------------------

            # Copy over the go backend binary to the common cla-backend folder (they share a single serverless.yml config)
            mkdir -p ~/project/cla-backend/bin
            cp ~/cla-backend-go/bin/backend-aws-lambda ~/project/cla-backend/bin/
            cp ~/cla-backend-go/bin/user-subscribe-lambda ~/project/cla-backend/bin/
            cp ~/cla-backend-go/bin/metrics-aws-lambda ~/project/cla-backend/bin/
            cp ~/cla-backend-go/bin/metrics-report-lambda ~/project/cla-backend/bin/
            cp ~/cla-backend-go/bin/dynamo-events-lambda ~/project/cla-backend/bin/
            cp ~/cla-backend-go/bin/zipbuilder-scheduler-lambda ~/project/cla-backend/bin/
            cp ~/cla-backend-go/bin/zipbuilder-lambda ~/project/cla-backend/bin/
            cp ~/cla-backend-go/bin/gitlab-repository-check-lambda ~/project/cla-backend/bin/

            ls -alF ~/project/cla-backend/
            pushd ~/project/cla-backend
            echo "Directory: $(pwd)"
            yarn install

            if [[ ! -f bin/backend-aws-lambda ]]; then echo "Missing bin/backend-aws-lambda binary file. Exiting..."; exit 1; fi
            if [[ ! -f bin/user-subscribe-lambda ]]; then echo "Missing bin/user-subscribe-lambda binary file. Exiting..."; exit 1; fi
            if [[ ! -f bin/metrics-aws-lambda ]]; then echo "Missing bin/metrics-aws-lambda binary file. Exiting..."; exit 1; fi
            if [[ ! -f bin/metrics-report-lambda ]]; then echo "Missing bin/metrics-report-lambda binary file. Exiting..."; exit 1; fi
            if [[ ! -f bin/dynamo-events-lambda ]]; then echo "Missing bin/dynamo-events-lambda binary file. Exiting..."; exit 1; fi
            if [[ ! -f bin/zipbuilder-lambda ]]; then echo "Missing bin/zipbuilder-lambda binary file. Exiting..."; exit 1; fi
            if [[ ! -f bin/zipbuilder-scheduler-lambda ]]; then echo "Missing bin/zipbuilder-scheduler-lambda binary file. Exiting..."; exit 1; fi
            if [[ ! -f bin/gitlab-repository-check-lambda ]]; then echo "Missing bin/gitlab-repository-check-lambda binary file. Exiting..."; exit 1; fi
            if [[ ! -f serverless.yml ]]; then echo "Missing serverless.yml file. Exiting..."; exit 1; fi
            if [[ ! -f serverless-authorizer.yml ]]; then echo "Missing serverless-authorizer.yml file. Exiting..."; exit 1; fi
            yarn sls deploy --force --stage ${STAGE} --region us-east-1
      - run:
          name: Service Check
          command: |
            sudo apt-get install -y curl
            v2_url=''
            v3_url=''
            if [[ "${STAGE}" == "prod" ]]; then
              v2_url=https://api.easycla.lfx.linuxfoundation.org/v2/health
              v3_url=https://api.easycla.lfx.linuxfoundation.org/v3/ops/health
            else
              v2_url=https://api.lfcla.${STAGE}.platform.linuxfoundation.org/v2/health
              v3_url=https://api.lfcla.${STAGE}.platform.linuxfoundation.org/v3/ops/health
            fi

            echo "Validating v2 backend using endpoint: ${v2_url}"
            curl --fail -XGET ${v2_url}
            exit_code=$?
            if [[ ${exit_coe} -eq 0 ]]; then
              echo "Successful response from endpoint: ${v2_url}"
            else
              echo "Failed to get a successful response from endpoint: ${v2_url}"
              exit ${exit_code}
            fi

            echo "Validating v3 backend using endpoint: ${v3_url}"
            curl --fail -XGET ${v3_url}
            exit_code=$?
            if [[ ${exit_coe} -eq 0 ]]; then
              echo "Successful response from endpoint: ${v3_url}"
              # JSON response should include "Status": "healthy"
              if [[ `curl -s -XGET ${v3_url} | jq -r '.Status'` == "healthy" ]]; then
                echo "Service is healthy"
              else
                echo "Service is NOT healthy"
                exit -1
              fi
            else
              echo "Failed to get a successful response from endpoint: ${v3_url}"
              exit ${exit_code}
            fi

  deployV2Backend: &deployV2BackendAnchor
    docker:
      - image: circleci/python:3.7.9-node
    steps:
      - attach_workspace:
          at: ~/
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "e9:13:85:f1:b1:a1:25:bf:f5:44:34:66:82:1e:31:59"
      - *setup_aws
      - run: echo 'export NVM_DIR=${HOME}/.nvm' >> $BASH_ENV
      - *install-node-12
      - run:
          name: Install Top Level Dependencies
          command: |
            echo "Node version is: $(node --version)"
            echo "Running top level install..."
            yarn install
      - run:
          name: Deploy EasyCLA v2
          command: |
            echo "Using AWS profile: ${AWS_PROFILE}"
            echo "Stage is: ${STAGE}"

            # --------------------------------------------------------------
            ## Debug to confirm the binary files were restored
            echo "Directory: ~/"
            ls -alF ~/
            echo "Directory: ~/cla-backend-go/"
            ls -alF ~/cla-backend-go/
            ## End Debug
            # --------------------------------------------------------------

            mkdir -p ~/project/cla-backend-go/bin
            cp ~/cla-backend-go/bin/backend-aws-lambda ~/project/cla-backend-go/bin/
            cp ~/cla-backend-go/bin/user-subscribe-lambda ~/project/cla-backend-go/bin/
            echo "Directory: ~/project/cla-backend-go/bin/"
            ls -alF ~/project/cla-backend-go/bin/
            pushd ~/project/cla-backend-go
            echo "Directory: $(pwd)"
            if [[ ! -f bin/backend-aws-lambda ]]; then echo "Missing bin/backend-aws-lambda binary file. Exiting..."; exit 1; fi
            if [[ ! -f bin/user-subscribe-lambda ]]; then echo "Missing bin/user-subscribe-lambda binary file. Exiting..."; exit 1; fi
            yarn install

            # Deploy to us-east-2
            if [[ ! -f serverless.yml ]]; then echo "Missing serverless.yml file in $(pwd). Exiting..."; exit 1; fi
            yarn sls deploy --force --stage ${STAGE} --region us-east-2
      - run:
          name: Service Check
          command: |
            sudo apt-get install -y curl
            v4_url=''
            if [[ "${STAGE}" == "prod" ]]; then
              v4_url=https://api-gw.platform.linuxfoundation.org/cla-service/v4/ops/health
            else
              v4_url=https://api-gw.${STAGE}.platform.linuxfoundation.org/cla-service/v4/ops/health
            fi

            echo "Validating v4 backend using endpoint: ${v4_url}"
            curl --fail -XGET ${v4_url}
            exit_code=$?
            if [[ ${exit_coe} -eq 0 ]]; then
              echo "Successful response from endpoint: ${v4_url}"
              # JSON response should include "Status": "healthy"
              if [[ `curl -s -XGET ${v4_url} | jq -r '.Status'` == "healthy" ]]; then
                echo "Service is healthy"
              else
                echo "Service is NOT healthy"
                exit -1
              fi
            else
              echo "Failed to get a successful response from endpoint: ${v4_url}"
              exit ${exit_code}
            fi

  deployV1BackendDev:
    <<: *deployV1BackendAnchor
    environment:
      AWS_ACCESS_KEY_ID_ENV_VAR: AWS_ACCESS_KEY_ID_DEV
      AWS_SECRET_ACCESS_KEY_ENV_VAR: AWS_SECRET_ACCESS_KEY_DEV
      AWS_PROFILE: lf-cla
      AWS_REGION: us-east-1
      STAGE: dev
      ROOT_DOMAIN: lfcla.dev.platform.linuxfoundation.org
      PRODUCT_DOMAIN: dev.lfcla.com

  deployV1BackendStaging:
    <<: *deployV1BackendAnchor
    environment:
      AWS_ACCESS_KEY_ID_ENV_VAR: AWS_ACCESS_KEY_ID_STAGING
      AWS_SECRET_ACCESS_KEY_ENV_VAR: AWS_SECRET_ACCESS_KEY_STAGING
      AWS_PROFILE: lf-cla
      AWS_REGION: us-east-1
      STAGE: staging
      ROOT_DOMAIN: lfcla.staging.platform.linuxfoundation.org
      PRODUCT_DOMAIN: staging.lfcla.com

  deployV1BackendProd:
    <<: *deployV1BackendAnchor
    environment:
      AWS_ACCESS_KEY_ID_ENV_VAR: AWS_ACCESS_KEY_ID_PROD
      AWS_SECRET_ACCESS_KEY_ENV_VAR: AWS_SECRET_ACCESS_KEY_PROD
      AWS_PROFILE: lf-cla
      AWS_REGION: us-east-1
      STAGE: prod
      ROOT_DOMAIN: lfcla.platform.linuxfoundation.org
      PRODUCT_DOMAIN: lfcla.com

  deployV2BackendDev:
    <<: *deployV2BackendAnchor
    environment:
      AWS_ACCESS_KEY_ID_ENV_VAR: AWS_ACCESS_KEY_ID_DEV
      AWS_SECRET_ACCESS_KEY_ENV_VAR: AWS_SECRET_ACCESS_KEY_DEV
      AWS_PROFILE: lf-cla
      AWS_REGION: us-east-1
      STAGE: dev
      ROOT_DOMAIN: lfcla.dev.platform.linuxfoundation.org
      PRODUCT_DOMAIN: dev.lfcla.com

  deployV2BackendStaging:
    <<: *deployV2BackendAnchor
    environment:
      AWS_ACCESS_KEY_ID_ENV_VAR: AWS_ACCESS_KEY_ID_STAGING
      AWS_SECRET_ACCESS_KEY_ENV_VAR: AWS_SECRET_ACCESS_KEY_STAGING
      AWS_PROFILE: lf-cla
      AWS_REGION: us-east-1
      STAGE: staging
      ROOT_DOMAIN: lfcla.staging.platform.linuxfoundation.org
      PRODUCT_DOMAIN: staging.lfcla.com

  deployV2BackendProd:
    <<: *deployV2BackendAnchor
    environment:
      AWS_ACCESS_KEY_ID_ENV_VAR: AWS_ACCESS_KEY_ID_PROD
      AWS_SECRET_ACCESS_KEY_ENV_VAR: AWS_SECRET_ACCESS_KEY_PROD
      AWS_PROFILE: lf-cla
      AWS_REGION: us-east-1
      STAGE: prod
      ROOT_DOMAIN: lfcla.platform.linuxfoundation.org
      PRODUCT_DOMAIN: lfcla.com

  buildFrontend: &buildFrontendAnchor
    docker:
      - image: circleci/node:8-browsers
    steps:
      - checkout
      - *setup_aws
      - run: echo 'export NVM_DIR=${HOME}/.nvm' >> $BASH_ENV
      - *install-node-12
      - run:
          name: Install Top Level Dependencies
          command: |
            echo "Node version is: $(node --version)"
            echo "Running top level install..."
            yarn install
      - *install-node-8
      - run:
          name: Install UI Dependencies
          command: |
            pushd $PROJECT_DIR
            echo "Running yarn install in folder: `pwd`. This will run yarn install in several places - see output below."
            yarn install-frontend
            popd
      - run:
          name: Build UI Source
          command: |
            echo "Building src..."
            pushd $PROJECT_DIR/src
            echo "AWS_PROFILE=${AWS_PROFILE}"
            echo "AWS_REGION=${AWS_REGION}"
            ls ~/.aws
            cat ${BASH_ENV}
            yarn prebuild:${STAGE}
            yarn build
            popd
      - run:
          name: Build Edge Source
          command: |
            echo "Building edge..."
            pushd $PROJECT_DIR/edge
            yarn build
            popd

  buildLandingPage: &buildLandingPageAnchor
    docker:
      - image: circleci/node:12-browsers
    steps:
      - checkout
      - *setup_aws
      - run: echo 'export NVM_DIR=${HOME}/.nvm' >> $BASH_ENV
      - *install-node-12
      - run:
          name: Install Top Level Dependencies
          command: |
            echo "Node version is: $(node --version)"
            echo "Running top level install..."
            yarn install
      - run:
          name: Install UI Dependencies
          command: |
            pushd $PROJECT_DIR
            echo "Running yarn install in folder: `pwd`."
            yarn install
            popd
      - run:
          name: Build Source
          command: |
            echo "Building source..."
            pushd $PROJECT_DIR
            yarn build:${STAGE}
            popd

  # Build Project Management Console
  buildProjectConsoleDev:
    <<: *buildFrontendAnchor
    environment:
      AWS_ACCESS_KEY_ID_ENV_VAR: AWS_ACCESS_KEY_ID_DEV
      AWS_SECRET_ACCESS_KEY_ENV_VAR: AWS_SECRET_ACCESS_KEY_DEV
      AWS_PROFILE: lf-cla
      AWS_REGION: us-east-1
      STAGE: dev
      PROJECT_DIR: cla-frontend-project-console
      ROOT_DOMAIN: lfcla.dev.platform.linuxfoundation.org
      PRODUCT_DOMAIN: dev.lfcla.com

  # Build Corporate Console
  buildCorporateConsoleDev:
    <<: *buildFrontendAnchor
    environment:
      AWS_ACCESS_KEY_ID_ENV_VAR: AWS_ACCESS_KEY_ID_DEV
      AWS_SECRET_ACCESS_KEY_ENV_VAR: AWS_SECRET_ACCESS_KEY_DEV
      AWS_PROFILE: lf-cla
      AWS_REGION: us-east-1
      STAGE: dev
      PROJECT_DIR: cla-frontend-corporate-console
      ROOT_DOMAIN: lfcla.dev.platform.linuxfoundation.org
      PRODUCT_DOMAIN: dev.lfcla.com

  # Build Contributor Console
  buildContributorConsoleDev:
    <<: *buildFrontendAnchor
    environment:
      AWS_ACCESS_KEY_ID_ENV_VAR: AWS_ACCESS_KEY_ID_DEV
      AWS_SECRET_ACCESS_KEY_ENV_VAR: AWS_SECRET_ACCESS_KEY_DEV
      AWS_PROFILE: lf-cla
      AWS_REGION: us-east-1
      STAGE: dev
      PROJECT_DIR: cla-frontend-contributor-console
      ROOT_DOMAIN: lfcla.dev.platform.linuxfoundation.org
      PRODUCT_DOMAIN: dev.lfcla.com

  # Build Landing Page Console
  buildLandingPageDev:
    <<: *buildLandingPageAnchor
    environment:
      AWS_ACCESS_KEY_ID_ENV_VAR: AWS_ACCESS_KEY_ID_DEV
      AWS_SECRET_ACCESS_KEY_ENV_VAR: AWS_SECRET_ACCESS_KEY_DEV
      AWS_PROFILE: lf-cla
      AWS_REGION: us-east-1
      STAGE: dev
      PROJECT_DIR: cla-landing-page
      ROOT_DOMAIN: lfcla.dev.platform.linuxfoundation.org
      PRODUCT_DOMAIN: dev.lfcla.com

  deployFrontend: &deployFrontendAnchor
    docker:
      - image: circleci/node:8-browsers
    steps:
      - checkout
      - *setup_aws
      - run: echo 'export NVM_DIR=${HOME}/.nvm' >> $BASH_ENV
      - *install-node-12
      - run:
          name: Install Top Level Dependencies
          command: |
            echo "Node version is: $(node --version)"
            echo "Running top level install..."
            yarn install
      - *install-node-8
      - run:
          name: Install UI Dependencies
          command: |
            pushd $PROJECT_DIR
            echo "Running yarn install in folder: `pwd`. This will run yarn install in several places - see output below."
            yarn install-frontend
            popd
      - run:
          name: Build UI Source
          command: |
            echo "Building src..."
            pushd $PROJECT_DIR/src
            echo "Current directory is: `pwd`"
            echo "Running pre-fetch config: 'yarn prebuild:${STAGE}'..."
            yarn prebuild:${STAGE}
            echo "Running build: 'yarn build:${STAGE}'..."
            yarn build:${STAGE}
            popd
      - run:
          name: Build Edge Source
          command: |
            echo "Building edge..."
            pushd $PROJECT_DIR/edge
            echo "Current directory is: `pwd`"
            echo "Running build: 'yarn build'..."
            yarn build
            popd
      - *install-node-12
      - *install_aws_cli
      - run:
          name: Deploy Cloudfront and LambdaEdge
          command: |
            pushd $PROJECT_DIR
            echo "Running install 'yarn install'..."
            yarn install
            echo ""
            echo "Running: yarn sls deploy --stage=\"${STAGE}\" --cloudfront=true"
            yarn sls deploy --stage="${STAGE}" --cloudfront="true"
            popd
      - run:
          name: Deploy Frontend Bucket
          command: |
            pushd $PROJECT_DIR
            echo "Running install 'yarn install'..."
            yarn install
            echo ""
            echo "Running: yarn sls client deploy --stage=\"${STAGE}\" --cloudfront=true --no-confirm --no-policy-change --no-config-change"
            yarn sls client deploy --stage="${STAGE}" --cloudfront="true" --no-confirm --no-policy-change --no-config-change
            popd
      - run:
          name: Invalidate Cache
          command: |
            pushd $PROJECT_DIR
            echo "Running: yarn sls cloudfrontInvalidate --stage=\"${STAGE}\" --region=\"${AWS_REGION}\" --cloudfront=\"true\""
            yarn sls cloudfrontInvalidate --stage="${STAGE}" --region="${AWS_REGION}" --cloudfront="true"
            popd

  # Project Management Console
  deployProjectManagementConsoleDev:
    <<: *deployFrontendAnchor
    environment:
      AWS_ACCESS_KEY_ID_ENV_VAR: AWS_ACCESS_KEY_ID_DEV
      AWS_SECRET_ACCESS_KEY_ENV_VAR: AWS_SECRET_ACCESS_KEY_DEV
      AWS_PROFILE: lf-cla
      AWS_REGION: us-east-1
      STAGE: dev
      PROJECT_DIR: cla-frontend-project-console
      ROOT_DOMAIN: lfcla.dev.platform.linuxfoundation.org
      PRODUCT_DOMAIN: dev.lfcla.com
      BUCKET_NAME: lf-cla-dev-cla-frontend-pmc-4

  deployProjectManagementConsoleStaging:
    <<: *deployFrontendAnchor
    environment:
      AWS_ACCESS_KEY_ID_ENV_VAR: AWS_ACCESS_KEY_ID_STAGING
      AWS_SECRET_ACCESS_KEY_ENV_VAR: AWS_SECRET_ACCESS_KEY_STAGING
      AWS_PROFILE: lf-cla
      AWS_REGION: us-east-1
      STAGE: staging
      PROJECT_DIR: cla-frontend-project-console
      ROOT_DOMAIN: lfcla.staging.platform.linuxfoundation.org
      PRODUCT_DOMAIN: staging.lfcla.com
      BUCKET_NAME: lf-cla-staging-cla-frontend-pmc-3

  deployProjectManagementConsoleProd:
    <<: *deployFrontendAnchor
    environment:
      AWS_ACCESS_KEY_ID_ENV_VAR: AWS_ACCESS_KEY_ID_PROD
      AWS_SECRET_ACCESS_KEY_ENV_VAR: AWS_SECRET_ACCESS_KEY_PROD
      AWS_PROFILE: lf-cla
      AWS_REGION: us-east-1
      STAGE: prod
      PROJECT_DIR: cla-frontend-project-console
      ROOT_DOMAIN: lfcla.platform.linuxfoundation.org
      PRODUCT_DOMAIN: lfcla.com
      BUCKET_NAME: lf-cla-prod-cla-frontend-pmc-3

  # Corporate Console
  deployCorporateConsoleDev:
    <<: *deployFrontendAnchor
    environment:
      AWS_ACCESS_KEY_ID_ENV_VAR: AWS_ACCESS_KEY_ID_DEV
      AWS_SECRET_ACCESS_KEY_ENV_VAR: AWS_SECRET_ACCESS_KEY_DEV
      AWS_PROFILE: lf-cla
      AWS_REGION: us-east-1
      STAGE: dev
      PROJECT_DIR: cla-frontend-corporate-console
      ROOT_DOMAIN: lfcla.dev.platform.linuxfoundation.org
      PRODUCT_DOMAIN: dev.lfcla.com
      BUCKET_NAME: lf-cla-dev-cla-frontend-cc-4

  deployCorporateConsoleStaging:
    <<: *deployFrontendAnchor
    environment:
      AWS_ACCESS_KEY_ID_ENV_VAR: AWS_ACCESS_KEY_ID_STAGING
      AWS_SECRET_ACCESS_KEY_ENV_VAR: AWS_SECRET_ACCESS_KEY_STAGING
      AWS_PROFILE: lf-cla
      AWS_REGION: us-east-1
      STAGE: staging
      PROJECT_DIR: cla-frontend-corporate-console
      ROOT_DOMAIN: lfcla.staging.platform.linuxfoundation.org
      PRODUCT_DOMAIN: staging.lfcla.com
      BUCKET_NAME: lf-cla-staging-cla-frontend-cc-3

  deployCorporateConsoleProd:
    <<: *deployFrontendAnchor
    environment:
      AWS_ACCESS_KEY_ID_ENV_VAR: AWS_ACCESS_KEY_ID_PROD
      AWS_SECRET_ACCESS_KEY_ENV_VAR: AWS_SECRET_ACCESS_KEY_PROD
      AWS_PROFILE: lf-cla
      AWS_REGION: us-east-1
      STAGE: prod
      PROJECT_DIR: cla-frontend-corporate-console
      ROOT_DOMAIN: lfcla.platform.linuxfoundation.org
      PRODUCT_DOMAIN: lfcla.com
      BUCKET_NAME: lf-cla-prod-cla-frontend-cc-3

  # Contributor Console
  deployContributorConsoleDev:
    <<: *deployFrontendAnchor
    environment:
      AWS_ACCESS_KEY_ID_ENV_VAR: AWS_ACCESS_KEY_ID_DEV
      AWS_SECRET_ACCESS_KEY_ENV_VAR: AWS_SECRET_ACCESS_KEY_DEV
      AWS_PROFILE: lf-cla
      AWS_REGION: us-east-1
      STAGE: dev
      PROJECT_DIR: cla-frontend-contributor-console
      ROOT_DOMAIN: lfcla.dev.platform.linuxfoundation.org
      PRODUCT_DOMAIN: dev.lfcla.com
      BUCKET_NAME: lf-cla-dev-cla-frontend-ic-4

  deployContributorConsoleStaging:
    <<: *deployFrontendAnchor
    environment:
      AWS_ACCESS_KEY_ID_ENV_VAR: AWS_ACCESS_KEY_ID_STAGING
      AWS_SECRET_ACCESS_KEY_ENV_VAR: AWS_SECRET_ACCESS_KEY_STAGING
      AWS_PROFILE: lf-cla
      AWS_REGION: us-east-1
      STAGE: staging
      PROJECT_DIR: cla-frontend-contributor-console
      ROOT_DOMAIN: lfcla.staging.platform.linuxfoundation.org
      PRODUCT_DOMAIN: staging.lfcla.com
      BUCKET_NAME: lf-cla-staging-cla-frontend-ic-3

  deployContributorConsoleProd:
    <<: *deployFrontendAnchor
    environment:
      AWS_ACCESS_KEY_ID_ENV_VAR: AWS_ACCESS_KEY_ID_PROD
      AWS_SECRET_ACCESS_KEY_ENV_VAR: AWS_SECRET_ACCESS_KEY_PROD
      AWS_PROFILE: lf-cla
      AWS_REGION: us-east-1
      STAGE: prod
      PROJECT_DIR: cla-frontend-contributor-console
      ROOT_DOMAIN: lfcla.platform.linuxfoundation.org
      PRODUCT_DOMAIN: lfcla.com
      BUCKET_NAME: lf-cla-prod-cla-frontend-ic-3

  deployLandingFrontend: &deployLandingFrontendAnchor
    docker:
      - image: circleci/node:8-browsers
    steps:
      - checkout
      - *setup_aws
      - run: echo 'export NVM_DIR=${HOME}/.nvm' >> $BASH_ENV
      - *install-node-12
      - run:
          name: Install Top Level Dependencies
          command: |
            echo "Node version is: $(node --version)"
            echo "Running top level install..."
            yarn install
      - run:
          name: Deploy
          command: |
            echo "Node version is: $(node --version)"
            echo "Using AWS profile: ${AWS_PROFILE}"
            echo "Stage is: ${STAGE}"
            echo "PROJECT_DIR=${PROJECT_DIR}"

            # Run the deploy scripts
            pushd ${PROJECT_DIR}
            echo "Current directory is: `pwd`"

            echo "Running install 'yarn install'..."
            yarn install
            echo "Running pre-fetch config: 'yarn prebuild:${STAGE}'..."
            yarn prebuild:${STAGE}
            echo "Running build..."
            yarn build:${STAGE}

            echo "Running deploy in folder: `pwd`"
            SLS_DEBUG=* ../node_modules/serverless/bin/serverless.js deploy -s ${STAGE} -r ${AWS_REGION} --verbose

            echo "Running client deploy in folder: `pwd`"
            SLS_DEBUG=* ../node_modules/serverless/bin/serverless.js client deploy -s ${STAGE} -r ${AWS_REGION} --cloudfront=true --no-confirm --no-policy-change --no-config-change

            echo "Invalidating Cloudfront caches in folder: `pwd`"
            SLS_DEBUG=* ../node_modules/serverless/bin/serverless.js cloudfrontInvalidate -s ${STAGE} -r ${AWS_REGION} --cloudfront=true
            popd

          no_output_timeout: 1.5h

  # Landing Page
  deployLandingFrontendDev:
    <<: *deployLandingFrontendAnchor
    environment:
      AWS_ACCESS_KEY_ID_ENV_VAR: AWS_ACCESS_KEY_ID_DEV
      AWS_SECRET_ACCESS_KEY_ENV_VAR: AWS_SECRET_ACCESS_KEY_DEV
      AWS_PROFILE: lf-cla
      AWS_REGION: us-east-1
      STAGE: dev
      PROJECT_DIR: cla-landing-page
      PRODUCT_DOMAIN: dev.lfcla.com

  deployLandingFrontendStaging:
    <<: *deployLandingFrontendAnchor
    environment:
      AWS_ACCESS_KEY_ID_ENV_VAR: AWS_ACCESS_KEY_ID_STAGING
      AWS_SECRET_ACCESS_KEY_ENV_VAR: AWS_SECRET_ACCESS_KEY_STAGING
      AWS_PROFILE: lf-cla
      AWS_REGION: us-east-1
      STAGE: staging
      PROJECT_DIR: cla-landing-page
      PRODUCT_DOMAIN: staging.lfcla.com

  deployLandingFrontendProd:
    <<: *deployLandingFrontendAnchor
    environment:
      AWS_ACCESS_KEY_ID_ENV_VAR: AWS_ACCESS_KEY_ID_PROD
      AWS_SECRET_ACCESS_KEY_ENV_VAR: AWS_SECRET_ACCESS_KEY_PROD
      AWS_PROFILE: lf-cla
      AWS_REGION: us-east-1
      STAGE: prod
      PROJECT_DIR: cla-landing-page
      PRODUCT_DOMAIN: lfcla.com

  functionalTestsTavern: &functionalTestsTavern
    docker:
      - image: circleci/python:3.7.4-node
    steps:
      - attach_workspace:
          at: ~/
      - checkout
      - run:
          name: setup
          command: |
            cd tests/rest
            sudo pip3 install -r requirements.freeze.txt
            echo "Installing curl and jq..."
            sudo apt-get install -y curl jq
      - *set_functional_test_environment
      - run:
          name: functional-tests
          halt_build_on_fail: false  # for now, we will pass all functional tests
          command: |
            source ${BASH_ENV}
            echo "Running functional tests for stage: ${STAGE}"
            cd tests/rest
            tavern-ci test_*.tavern.yaml --alluredir=allure_result_folder -v || true

  functionalTestsGo: &functionalTestsGo
    docker:
      - image: circleci/golang:1.17
    steps:
      - attach_workspace:
          at: ~/
      - checkout
      - *set_functional_test_environment
      - run:
          name: functional-tests-go
          command: |
            source "${BASH_ENV}"
            echo "Running golang functional tests for stage: ${STAGE}"
            echo "Home directory            : $(ls ${HOME})"
            echo "${HOME}/cla-backend-go directory: $(ls ${HOME}/cla-backend-go)"
            ${HOME}/cla-backend-go/bin/functional-tests

  functionalTestsTavernDev:
    <<: *functionalTestsTavern
    environment:
      # Default Functional Test User
      AUTH0_USERNAME_ENV_VAR: AUTH0_USERNAME_DEV
      AUTH0_PASSWORD_ENV_VAR: AUTH0_PASSWORD_DEV
      AUTH0_CLIENT_ID_ENV_VAR: AUTH0_CLIENT_ID_DEV
      # Prospective CLA Manager User
      AUTH0_USER1_EMAIL_ENV_VAR: AUTH0_USER1_EMAIL_DEV
      AUTH0_USER1_USERNAME_ENV_VAR: AUTH0_USER1_USERNAME_DEV
      AUTH0_USER1_PASSWORD_ENV_VAR: AUTH0_USER1_PASSWORD_DEV
      AUTH0_USER1_CLIENT_ID_ENV_VAR: AUTH0_USER1_CLIENT_ID_DEV
      # CLA Manager User
      AUTH0_USER2_EMAIL_ENV_VAR: AUTH0_USER2_EMAIL_DEV
      AUTH0_USER2_USERNAME_ENV_VAR: AUTH0_USER2_USERNAME_DEV
      AUTH0_USER2_PASSWORD_ENV_VAR: AUTH0_USER2_PASSWORD_DEV
      AUTH0_USER2_CLIENT_ID_ENV_VAR: AUTH0_USER2_CLIENT_ID_DEV
      # CLA Manager Intel
      AUTH0_USER3_EMAIL_ENV_VAR: AUTH0_USER3_EMAIL_DEV
      AUTH0_USER3_USERNAME_ENV_VAR: AUTH0_USER3_USERNAME_DEV
      AUTH0_USER3_PASSWORD_ENV_VAR: AUTH0_USER3_PASSWORD_DEV
      AUTH0_USER3_CLIENT_ID_ENV_VAR: AUTH0_USER3_CLIENT_ID_DEV
      # CLA Manager AT&T
      AUTH0_USER4_EMAIL_ENV_VAR: AUTH0_USER4_EMAIL_DEV
      AUTH0_USER4_USERNAME_ENV_VAR: AUTH0_USER4_USERNAME_DEV
      AUTH0_USER4_PASSWORD_ENV_VAR: AUTH0_USER4_PASSWORD_DEV
      AUTH0_USER4_CLIENT_ID_ENV_VAR: AUTH0_USER4_CLIENT_ID_DEV
      # Project Manager ColorIO
      AUTH0_USER5_EMAIL_ENV_VAR: AUTH0_USER5_EMAIL_DEV
      AUTH0_USER5_USERNAME_ENV_VAR: AUTH0_USER5_USERNAME_DEV
      AUTH0_USER5_PASSWORD_ENV_VAR: AUTH0_USER5_PASSWORD_DEV
      AUTH0_USER5_CLIENT_ID_ENV_VAR: AUTH0_USER5_CLIENT_ID_DEV
      API_URL: 'https://api.lfcla.dev.platform.linuxfoundation.org'
      V2_API_URL: 'https://api-gw.dev.platform.linuxfoundation.org/cla-service'
      STAGE: dev

  functionalTestsGoDev:
    <<: *functionalTestsGo
    environment:
      # Default Functional Test User
      AUTH0_USERNAME_ENV_VAR: AUTH0_USERNAME_DEV
      AUTH0_PASSWORD_ENV_VAR: AUTH0_PASSWORD_DEV
      AUTH0_CLIENT_ID_ENV_VAR: AUTH0_CLIENT_ID_DEV
      # Prospective CLA Manager User
      AUTH0_USER1_EMAIL_ENV_VAR: AUTH0_USER1_EMAIL_DEV
      AUTH0_USER1_USERNAME_ENV_VAR: AUTH0_USER1_USERNAME_DEV
      AUTH0_USER1_PASSWORD_ENV_VAR: AUTH0_USER1_PASSWORD_DEV
      AUTH0_USER1_CLIENT_ID_ENV_VAR: AUTH0_USER1_CLIENT_ID_DEV
      # CLA Manager User
      AUTH0_USER2_EMAIL_ENV_VAR: AUTH0_USER2_EMAIL_DEV
      AUTH0_USER2_USERNAME_ENV_VAR: AUTH0_USER2_USERNAME_DEV
      AUTH0_USER2_PASSWORD_ENV_VAR: AUTH0_USER2_PASSWORD_DEV
      AUTH0_USER2_CLIENT_ID_ENV_VAR: AUTH0_USER2_CLIENT_ID_DEV
      # CLA Manager Intel
      AUTH0_USER3_EMAIL_ENV_VAR: AUTH0_USER3_EMAIL_DEV
      AUTH0_USER3_USERNAME_ENV_VAR: AUTH0_USER3_USERNAME_DEV
      AUTH0_USER3_PASSWORD_ENV_VAR: AUTH0_USER3_PASSWORD_DEV
      AUTH0_USER3_CLIENT_ID_ENV_VAR: AUTH0_USER3_CLIENT_ID_DEV
      # CLA Manager AT&T
      AUTH0_USER4_EMAIL_ENV_VAR: AUTH0_USER4_EMAIL_DEV
      AUTH0_USER4_USERNAME_ENV_VAR: AUTH0_USER4_USERNAME_DEV
      AUTH0_USER4_PASSWORD_ENV_VAR: AUTH0_USER4_PASSWORD_DEV
      AUTH0_USER4_CLIENT_ID_ENV_VAR: AUTH0_USER4_CLIENT_ID_DEV
      # Project Manager ColorIO
      AUTH0_USER5_EMAIL_ENV_VAR: AUTH0_USER5_EMAIL_DEV
      AUTH0_USER5_USERNAME_ENV_VAR: AUTH0_USER5_USERNAME_DEV
      AUTH0_USER5_PASSWORD_ENV_VAR: AUTH0_USER5_PASSWORD_DEV
      AUTH0_USER5_CLIENT_ID_ENV_VAR: AUTH0_USER5_CLIENT_ID_DEV
      API_URL: 'https://api.lfcla.dev.platform.linuxfoundation.org'
      V2_API_URL: 'https://api-gw.dev.platform.linuxfoundation.org/cla-service'
      STAGE: dev

workflows:
  version: 2.1
  build_and_deploy:
    jobs:
      - buildBackendDev:
          filters:
            tags:
              only: /.*/
      - buildGoBackendCommon:
          filters:
            tags:
              only: /.*/
      - buildProjectConsoleDev:
          filters:
            tags:
              only: /.*/
      - buildCorporateConsoleDev:
          filters:
            tags:
              only: /.*/
      - buildContributorConsoleDev:
          filters:
            tags:
              only: /.*/
      - buildLandingPageDev:
          filters:
            tags:
              only: /.*/

      # Deploy v1 Dev
      - deployV1BackendDev:
          requires:
            - buildBackendDev
            - buildGoBackendCommon
          filters:
            tags:
              ignore: /.*/
            branches:
              only:
                - main
      # Deploy v2 Dev
      - deployV2BackendDev:
          requires:
            - buildGoBackendCommon
          filters:
            tags:
              ignore: /.*/
            branches:
              only:
                - main
      - deployProjectManagementConsoleDev:
          filters:
            tags:
              ignore: /.*/
            branches:
              only:
                - main
      - deployCorporateConsoleDev:
          filters:
            tags:
              ignore: /.*/
            branches:
              only:
                - main
      - deployContributorConsoleDev:
          filters:
            tags:
              ignore: /.*/
            branches:
              only:
                - main
      - deployLandingFrontendDev:
          filters:
            tags:
              ignore: /.*/
            branches:
              only:
                - main
      - functionalTestsGoDev:
          requires:
            - deployV1BackendDev
            - deployV2BackendDev
          filters:
            tags:
              ignore: /.*/
            branches:
              only:
                - main
      - functionalTestsTavernDev:
          requires:
            - deployV1BackendDev
            - deployV2BackendDev
          filters:
            tags:
              ignore: /.*/
            branches:
              only:
                - main

      # Deploy Staging
      - buildBackendStaging:
          filters:
            branches:
              ignore: /.*/
            tags:
              # see semver examples https://regex101.com/r/Ly7O1x/201/
              only: /^v?(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(?:-((?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?$/
      - approve_staging:
          type: approval
          requires:
            - buildBackendStaging
            - buildGoBackendCommon
          filters:
            branches:
              ignore: /.*/
            tags:
              # see semver examples https://regex101.com/r/Ly7O1x/201/
              only: /^v?(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(?:-((?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?$/
      - deployV1BackendStaging:
          requires:
            - approve_staging
            - buildBackendStaging
            - buildGoBackendCommon
          filters:
            branches:
              ignore: /.*/
            tags:
              # see semver examples https://regex101.com/r/Ly7O1x/201/
              only: /^v?(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(?:-((?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?$/
      - deployV2BackendStaging:
          requires:
            - approve_staging
            - buildGoBackendCommon
          filters:
            branches:
              ignore: /.*/
            tags:
              # see semver examples https://regex101.com/r/Ly7O1x/201/
              only: /^v?(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(?:-((?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?$/
      - deployProjectManagementConsoleStaging:
          requires:
            - approve_staging
          filters:
            branches:
              ignore: /.*/
            tags:
              # see semver examples https://regex101.com/r/Ly7O1x/201/
              only: /^v?(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(?:-((?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?$/
      - deployCorporateConsoleStaging:
          requires:
            - approve_staging
          filters:
            branches:
              ignore: /.*/
            tags:
              # see semver examples https://regex101.com/r/Ly7O1x/201/
              only: /^v?(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(?:-((?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?$/
      - deployContributorConsoleStaging:
          requires:
            - approve_staging
          filters:
            branches:
              ignore: /.*/
            tags:
              # see semver examples https://regex101.com/r/Ly7O1x/201/
              only: /^v?(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(?:-((?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?$/
      - deployLandingFrontendStaging:
          requires:
            - approve_staging
          filters:
            branches:
              ignore: /.*/
            tags:
              # see semver examples https://regex101.com/r/Ly7O1x/201/
              only: /^v?(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(?:-((?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?$/

      # Deploy Prod
      - buildBackendProd:
          filters:
            branches:
              ignore: /.*/
            tags:
              # see semver examples https://regex101.com/r/Ly7O1x/201/
              only: /^v?(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(?:-((?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?$/
      - approve_prod:
          type: approval
          requires:
            - buildBackendProd
            - buildGoBackendCommon
          filters:
            branches:
              ignore: /.*/
            tags:
              # see semver examples https://regex101.com/r/Ly7O1x/201/
              only: /^v?(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(?:-((?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?$/
      - deployV1BackendProd:
          requires:
            - approve_prod
            - buildBackendProd
            - buildGoBackendCommon
          filters:
            branches:
              ignore: /.*/
            tags:
              # see semver examples https://regex101.com/r/Ly7O1x/201/
              only: /^v?(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(?:-((?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?$/
      - deployV2BackendProd:
          requires:
            - approve_prod
            - buildGoBackendCommon
          filters:
            branches:
              ignore: /.*/
            tags:
              # see semver examples https://regex101.com/r/Ly7O1x/201/
              only: /^v?(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(?:-((?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?$/
      - deployProjectManagementConsoleProd:
          requires:
            - approve_prod
          filters:
            branches:
              ignore: /.*/
            tags:
              # see semver examples https://regex101.com/r/Ly7O1x/201/
              only: /^v?(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(?:-((?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?$/
      - deployCorporateConsoleProd:
          requires:
            - approve_prod
          filters:
            branches:
              ignore: /.*/
            tags:
              # see semver examples https://regex101.com/r/Ly7O1x/201/
              only: /^v?(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(?:-((?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?$/
      - deployContributorConsoleProd:
          requires:
            - approve_prod
          filters:
            branches:
              ignore: /.*/
            tags:
              # see semver examples https://regex101.com/r/Ly7O1x/201/
              only: /^v?(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(?:-((?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?$/
      - deployLandingFrontendProd:
          requires:
            - approve_prod
          filters:
            branches:
              ignore: /.*/
            tags:
              # see semver examples https://regex101.com/r/Ly7O1x/201/
              only: /^v?(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(?:-((?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?$/
